/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;


namespace RemoteReading.Core
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public  class Hospital : TBase
  {
    private int _hospitalID;
    private string _hospitalName;
    private string _province;
    private string _city;
    private string _addInTime;
    private string _regionCode;
    private int _version;

    public int HospitalID
    {
      get
      {
        return _hospitalID;
      }
      set
      {
        __isset.hospitalID = true;
        this._hospitalID = value;
      }
    }

    public string HospitalName
    {
      get
      {
        return _hospitalName;
      }
      set
      {
        __isset.hospitalName = true;
        this._hospitalName = value;
      }
    }

    public string Province
    {
      get
      {
        return _province;
      }
      set
      {
        __isset.province = true;
        this._province = value;
      }
    }

    public string City
    {
      get
      {
        return _city;
      }
      set
      {
        __isset.city = true;
        this._city = value;
      }
    }

    public string AddInTime
    {
      get
      {
        return _addInTime;
      }
      set
      {
        __isset.addInTime = true;
        this._addInTime = value;
      }
    }

    public string RegionCode
    {
      get
      {
        return _regionCode;
      }
      set
      {
        __isset.regionCode = true;
        this._regionCode = value;
      }
    }

    public int Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool hospitalID;
      public bool hospitalName;
      public bool province;
      public bool city;
      public bool addInTime;
      public bool regionCode;
      public bool version;
    }

    #region ¹¹Ôìº¯Êý
    public Hospital()
    {

    }
    public Hospital(int hospID)
    {
        this.HospitalID = hospID;
    }
    public Hospital(int hosid, string hospname, string province, string city, int version)
    {
        this.HospitalID = hosid;
        this.HospitalName = hospname;
        this.Province = province;
        this.City = city;
        this.Version = version;
    }
    #endregion

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              HospitalID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              HospitalName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Province = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              City = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              AddInTime = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              RegionCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Version = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Hospital");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.hospitalID) {
        field.Name = "hospitalID";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(HospitalID);
        oprot.WriteFieldEnd();
      }
      if (HospitalName != null && __isset.hospitalName) {
        field.Name = "hospitalName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(HospitalName);
        oprot.WriteFieldEnd();
      }
      if (Province != null && __isset.province) {
        field.Name = "province";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Province);
        oprot.WriteFieldEnd();
      }
      if (City != null && __isset.city) {
        field.Name = "city";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(City);
        oprot.WriteFieldEnd();
      }
      if (AddInTime != null && __isset.addInTime) {
        field.Name = "addInTime";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AddInTime);
        oprot.WriteFieldEnd();
      }
      if (RegionCode != null && __isset.regionCode) {
        field.Name = "regionCode";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(RegionCode);
        oprot.WriteFieldEnd();
      }
      if (__isset.version) {
        field.Name = "version";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Version);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Hospital(");
      bool __first = true;
      if (__isset.hospitalID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HospitalID: ");
        __sb.Append(HospitalID);
      }
      if (HospitalName != null && __isset.hospitalName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HospitalName: ");
        __sb.Append(HospitalName);
      }
      if (Province != null && __isset.province) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Province: ");
        __sb.Append(Province);
      }
      if (City != null && __isset.city) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("City: ");
        __sb.Append(City);
      }
      if (AddInTime != null && __isset.addInTime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AddInTime: ");
        __sb.Append(AddInTime);
      }
      if (RegionCode != null && __isset.regionCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RegionCode: ");
        __sb.Append(RegionCode);
      }
      if (__isset.version) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Version: ");
        __sb.Append(Version);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
