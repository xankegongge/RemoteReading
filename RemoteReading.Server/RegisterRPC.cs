/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;
using RemoteReading.Core;
namespace RemoteReading
{
    public partial class RegisterRPC
    {
        public interface Iface
        {
            List<Hospital> GetAllHospitals();
#if SILVERLIGHT
      IAsyncResult Begin_GetAllHospitals(AsyncCallback callback, object state, );
      List<Hospital> End_GetAllHospitals(IAsyncResult asyncResult);
#endif
            bool ResetPassword(string email);
#if SILVERLIGHT
      IAsyncResult Begin_ResetPassword(AsyncCallback callback, object state, string email);
      bool End_ResetPassword(IAsyncResult asyncResult);
#endif
            int Register(string userid, string pwd, string personname, string mobilephone, string email, int hospitalID, int title, int usertype);
#if SILVERLIGHT
      IAsyncResult Begin_Register(AsyncCallback callback, object state, string userid, string pwd, string personname, string mobilephone, string email, int hospitalID, int title, int usertype);
      int End_Register(IAsyncResult asyncResult);
#endif
        }

        public class Client : Iface
        {
            public Client(TProtocol prot)
                : this(prot, prot)
            {
            }

            public Client(TProtocol iprot, TProtocol oprot)
            {
                iprot_ = iprot;
                oprot_ = oprot;
            }

            protected TProtocol iprot_;
            protected TProtocol oprot_;
            protected int seqid_;

            public TProtocol InputProtocol
            {
                get { return iprot_; }
            }
            public TProtocol OutputProtocol
            {
                get { return oprot_; }
            }



#if SILVERLIGHT
      public IAsyncResult Begin_GetAllHospitals(AsyncCallback callback, object state, )
      {
        return send_GetAllHospitals(callback, state);
      }

      public List<Hospital> End_GetAllHospitals(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAllHospitals();
      }

#endif

            public List<Hospital> GetAllHospitals()
            {
#if !SILVERLIGHT
                send_GetAllHospitals();
                return recv_GetAllHospitals();

#else
        var asyncResult = Begin_GetAllHospitals(null, null, );
        return End_GetAllHospitals(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_GetAllHospitals(AsyncCallback callback, object state, )
#else
            public void send_GetAllHospitals()
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("GetAllHospitals", TMessageType.Call, seqid_));
                GetAllHospitals_args args = new GetAllHospitals_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<Hospital> recv_GetAllHospitals()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                GetAllHospitals_result result = new GetAllHospitals_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAllHospitals failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_ResetPassword(AsyncCallback callback, object state, string email)
      {
        return send_ResetPassword(callback, state, email);
      }

      public bool End_ResetPassword(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ResetPassword();
      }

#endif

            public bool ResetPassword(string email)
            {
#if !SILVERLIGHT
                send_ResetPassword(email);
                return recv_ResetPassword();

#else
        var asyncResult = Begin_ResetPassword(null, null, email);
        return End_ResetPassword(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_ResetPassword(AsyncCallback callback, object state, string email)
#else
            public void send_ResetPassword(string email)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("ResetPassword", TMessageType.Call, seqid_));
                ResetPassword_args args = new ResetPassword_args();
                args.Email = email;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_ResetPassword()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                ResetPassword_result result = new ResetPassword_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ResetPassword failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_Register(AsyncCallback callback, object state, string userid, string pwd, string personname, string mobilephone, string email, int hospitalID, int title, int usertype)
      {
        return send_Register(callback, state, userid, pwd, personname, mobilephone, email, hospitalID, title, usertype);
      }

      public int End_Register(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Register();
      }

#endif

            public int Register(string userid, string pwd, string personname, string mobilephone, string email, int hospitalID, int title, int usertype)
            {
#if !SILVERLIGHT
                send_Register(userid, pwd, personname, mobilephone, email, hospitalID, title, usertype);
                return recv_Register();

#else
        var asyncResult = Begin_Register(null, null, userid, pwd, personname, mobilephone, email, hospitalID, title, usertype);
        return End_Register(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_Register(AsyncCallback callback, object state, string userid, string pwd, string personname, string mobilephone, string email, int hospitalID, int title, int usertype)
#else
            public void send_Register(string userid, string pwd, string personname, string mobilephone, string email, int hospitalID, int title, int usertype)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("Register", TMessageType.Call, seqid_));
                Register_args args = new Register_args();
                args.Userid = userid;
                args.Pwd = pwd;
                args.Personname = personname;
                args.Mobilephone = mobilephone;
                args.Email = email;
                args.HospitalID = hospitalID;
                args.Title = title;
                args.Usertype = usertype;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public int recv_Register()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                Register_result result = new Register_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Register failed: unknown result");
            }

        }
        public class Processor : TProcessor
        {
            public Processor(Iface iface)
            {
                iface_ = iface;
                processMap_["GetAllHospitals"] = GetAllHospitals_Process;
                processMap_["ResetPassword"] = ResetPassword_Process;
                processMap_["Register"] = Register_Process;
            }

            protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
            private Iface iface_;
            protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

            public bool Process(TProtocol iprot, TProtocol oprot)
            {
                try
                {
                    TMessage msg = iprot.ReadMessageBegin();
                    ProcessFunction fn;
                    processMap_.TryGetValue(msg.Name, out fn);
                    if (fn == null)
                    {
                        TProtocolUtil.Skip(iprot, TType.Struct);
                        iprot.ReadMessageEnd();
                        TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
                        oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
                        x.Write(oprot);
                        oprot.WriteMessageEnd();
                        oprot.Transport.Flush();
                        return true;
                    }
                    fn(msg.SeqID, iprot, oprot);
                }
                catch (IOException)
                {
                    return false;
                }
                return true;
            }

            public void GetAllHospitals_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                GetAllHospitals_args args = new GetAllHospitals_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                GetAllHospitals_result result = new GetAllHospitals_result();
                result.Success = iface_.GetAllHospitals();
                oprot.WriteMessageBegin(new TMessage("GetAllHospitals", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void ResetPassword_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                ResetPassword_args args = new ResetPassword_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                ResetPassword_result result = new ResetPassword_result();
                result.Success = iface_.ResetPassword(args.Email);
                oprot.WriteMessageBegin(new TMessage("ResetPassword", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void Register_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                Register_args args = new Register_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                Register_result result = new Register_result();
                result.Success = iface_.Register(args.Userid, args.Pwd, args.Personname, args.Mobilephone, args.Email, args.HospitalID, args.Title, args.Usertype);
                oprot.WriteMessageBegin(new TMessage("Register", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class GetAllHospitals_args : TBase
        {

            public GetAllHospitals_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("GetAllHospitals_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("GetAllHospitals_args(");
                sb.Append(")");
                return sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class GetAllHospitals_result : TBase
        {
            private List<Hospital> _success;

            public List<Hospital> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public GetAllHospitals_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<Hospital>();
                                    TList _list0 = iprot.ReadListBegin();
                                    for (int _i1 = 0; _i1 < _list0.Count; ++_i1)
                                    {
                                        Hospital _elem2 = new Hospital();
                                        _elem2 = new Hospital();
                                        _elem2.Read(iprot);
                                        Success.Add(_elem2);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("GetAllHospitals_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                            foreach (Hospital _iter3 in Success)
                            {
                                _iter3.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("GetAllHospitals_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class ResetPassword_args : TBase
        {
            private string _email;

            public string Email
            {
                get
                {
                    return _email;
                }
                set
                {
                    __isset.email = true;
                    this._email = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool email;
            }

            public ResetPassword_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Email = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("ResetPassword_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Email != null && __isset.email)
                {
                    field.Name = "email";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Email);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("ResetPassword_args(");
                sb.Append("Email: ");
                sb.Append(Email);
                sb.Append(")");
                return sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class ResetPassword_result : TBase
        {
            private bool _success;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public ResetPassword_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("ResetPassword_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("ResetPassword_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class Register_args : TBase
        {
            private string _userid;
            private string _pwd;
            private string _personname;
            private string _mobilephone;
            private string _email;
            private int _hospitalID;
            private int _title;
            private int _usertype;

            public string Userid
            {
                get
                {
                    return _userid;
                }
                set
                {
                    __isset.userid = true;
                    this._userid = value;
                }
            }

            public string Pwd
            {
                get
                {
                    return _pwd;
                }
                set
                {
                    __isset.pwd = true;
                    this._pwd = value;
                }
            }

            public string Personname
            {
                get
                {
                    return _personname;
                }
                set
                {
                    __isset.personname = true;
                    this._personname = value;
                }
            }

            public string Mobilephone
            {
                get
                {
                    return _mobilephone;
                }
                set
                {
                    __isset.mobilephone = true;
                    this._mobilephone = value;
                }
            }

            public string Email
            {
                get
                {
                    return _email;
                }
                set
                {
                    __isset.email = true;
                    this._email = value;
                }
            }

            public int HospitalID
            {
                get
                {
                    return _hospitalID;
                }
                set
                {
                    __isset.hospitalID = true;
                    this._hospitalID = value;
                }
            }

            public int Title
            {
                get
                {
                    return _title;
                }
                set
                {
                    __isset.title = true;
                    this._title = value;
                }
            }

            public int Usertype
            {
                get
                {
                    return _usertype;
                }
                set
                {
                    __isset.usertype = true;
                    this._usertype = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool userid;
                public bool pwd;
                public bool personname;
                public bool mobilephone;
                public bool email;
                public bool hospitalID;
                public bool title;
                public bool usertype;
            }

            public Register_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Userid = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                Pwd = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.String)
                            {
                                Personname = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.String)
                            {
                                Mobilephone = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 5:
                            if (field.Type == TType.String)
                            {
                                Email = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 6:
                            if (field.Type == TType.I32)
                            {
                                HospitalID = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 7:
                            if (field.Type == TType.I32)
                            {
                                Title = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 8:
                            if (field.Type == TType.I32)
                            {
                                Usertype = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("Register_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Userid != null && __isset.userid)
                {
                    field.Name = "userid";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Userid);
                    oprot.WriteFieldEnd();
                }
                if (Pwd != null && __isset.pwd)
                {
                    field.Name = "pwd";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Pwd);
                    oprot.WriteFieldEnd();
                }
                if (Personname != null && __isset.personname)
                {
                    field.Name = "personname";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Personname);
                    oprot.WriteFieldEnd();
                }
                if (Mobilephone != null && __isset.mobilephone)
                {
                    field.Name = "mobilephone";
                    field.Type = TType.String;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Mobilephone);
                    oprot.WriteFieldEnd();
                }
                if (Email != null && __isset.email)
                {
                    field.Name = "email";
                    field.Type = TType.String;
                    field.ID = 5;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Email);
                    oprot.WriteFieldEnd();
                }
                if (__isset.hospitalID)
                {
                    field.Name = "hospitalID";
                    field.Type = TType.I32;
                    field.ID = 6;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(HospitalID);
                    oprot.WriteFieldEnd();
                }
                if (__isset.title)
                {
                    field.Name = "title";
                    field.Type = TType.I32;
                    field.ID = 7;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(Title);
                    oprot.WriteFieldEnd();
                }
                if (__isset.usertype)
                {
                    field.Name = "usertype";
                    field.Type = TType.I32;
                    field.ID = 8;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(Usertype);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("Register_args(");
                sb.Append("Userid: ");
                sb.Append(Userid);
                sb.Append(",Pwd: ");
                sb.Append(Pwd);
                sb.Append(",Personname: ");
                sb.Append(Personname);
                sb.Append(",Mobilephone: ");
                sb.Append(Mobilephone);
                sb.Append(",Email: ");
                sb.Append(Email);
                sb.Append(",HospitalID: ");
                sb.Append(HospitalID);
                sb.Append(",Title: ");
                sb.Append(Title);
                sb.Append(",Usertype: ");
                sb.Append(Usertype);
                sb.Append(")");
                return sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class Register_result : TBase
        {
            private int _success;

            public int Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public Register_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.I32)
                            {
                                Success = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("Register_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.I32;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(Success);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("Register_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }

    }
}
